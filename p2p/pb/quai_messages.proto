syntax = "proto3";

package quaiprotocol;
option go_package = "github.com/dominant-strategies/go-quai/p2p/pb";

// GossipSub messages for broadcasting blocks and transactions
message GossipBlock { BlockHash block = 1; }

message GossipTransaction { Transaction transaction = 1; }

// Stream-based request-response messages
message QuaiProtocolMessage {
  enum ActionType {
    REQUEST_BLOCK = 0;
    REQUEST_TRANSACTION = 1;
  }

  ActionType action = 1;
  bytes data = 2; // Encoded payload specific to the action
}

message Context {
  string location = 1;
  uint32 level = 2;
}

message SliceID {
  Context context = 1;
  uint32 region = 2;
  uint32 zone = 3;
}

// Define a block structure
message BlockHash {
  string hash = 1; // Unique identifier of the block
  // TODO: evaluate adding additional fields like miner, difficulty,
  // totalDifficulty, extraData, size, gasLimit, gasUsed, timestamp, etc.
}

// Define a transaction structure
message Transaction {
  string hash = 1;     // Unique identifier of the transaction
  string from = 2;     // Sender address
  string to = 3;       // Recipient address (empty for contract creation)
  uint64 nonce = 4;    // Nonce of the sender
  string value = 5;    // Value transferred in Wei
  string gasPrice = 6; // Gas price in Wei
  uint64 gas = 7;      // Gas limit
  bytes input = 8;     // Input data (for contract calls)
  // TODO: evaluate adding additional fields for signature components (v, r, s)
  // and chainID for EIP-155 compliance
}

// Request and response messages for block and transaction queries
message BlockRequest {
  SliceID sliceId = 1;
  string hash = 2;
}

message BlockResponse {
  bool found = 1;
  BlockHash block = 2;
}

message TransactionRequest { string hash = 1; }

message TransactionResponse {
  bool found = 1;
  Transaction transaction = 2;
}
